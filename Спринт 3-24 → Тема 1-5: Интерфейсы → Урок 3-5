import java.util.ArrayList;
import java.util.List;

class Article {

    final String getArticle;

    Article(final String getArticle) {
        this.getArticle = getArticle;
    }
}

interface Subscriber {
    // создайте интерфейс Subscriber
    public void send (Article article);
    // интерфейс должен иметь всего один метод void send(), который принимает на вход объект класса Article
}



class OfflineSubscriber implements Subscriber  {
    /* класс должен реализовывать интерфейс Subscriber */

    private final String address;

    public OfflineSubscriber(final String address) {
        this.address = address;
    }
    public void send (Article article) {
        System.out.println(article.getArticle + " была доставлена по адресу: " + address);
        // метод send интерфейса Subscriber должен выводить текст "{article.getArticle} была доставлена по адресу: {address}"
    }
}

class WebSite implements Subscriber /* класс должен реализовывать интерфейс Subscriber */ {

    private final String url;

    public WebSite(final String url) {
        this.url = url;
    }
    public void send (Article article){
        System.out.println(article.getArticle + " опубликована на страничке: " + url);
    }
    // метод send интерфейса Subscriber должен выводить текст "{article.getArticle} опубликована на страничке: {address}"
}

class NewspaperPublisher {

    private final List<Article> articles;// для отправки статей подписчикам, вам необходимо хранить их в списке
    // создайте пустой список подписчиков List<Subscriber>
    public List<Subscriber> subscribers = new ArrayList<>();
    

    public NewspaperPublisher(final List<Article> articles) {
        this.articles = articles;
    }

    public void subscribe (Subscriber sub) {
        if (subscribers.contains(sub) != true ) {
            subscribers.add (sub);
        }
        // Создайте метод subscribe() принимающий на вход любой объект, реализующий интерфейс Subscriber.
        // При вызове метода subscribe() новый подписчик должен добавляться в список подписчиков.
        // В списке подписчиков не должно быть дубликатов! Вы можете проеверить, есть ли данный подписчик в списке методом List.contains().
    }

    public void unsubscribe (Subscriber sub) {
        // Создайте метод unsubscribe() принимающий на вход любой объект, реализующий интерфейс Subscriber.
        // При вызове данного метода подписчик должен удаляться из списка подписчиков.
        subscribers.remove (sub);
    }

    public void startWork () {
        // Создайте метод startWork().
        for (Subscriber sub : subscribers) {
            for (Article art : articles) {
                sub.send(art);
            }
        }
        // Метод должен отправлять все статьи, которые хранятся в данный момент в списке articles, всем подписчикам из списка.
        // Для отправки используйте метод send() класса Subscriber.
    }




    public void publishNewArticle (Article article) {
        articles.add(article);
        for (Subscriber sub : subscribers) {
            sub.send(article);
        }
        // Создайте метод publishNewArticle(). Метод принимает на вход объект класса Article.
        // Метод должен добавлять новую статью в список статей articles, а затем рассылать её всем подписчикам из списка.
    }
}
